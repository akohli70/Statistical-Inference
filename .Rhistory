install.packages("rmarkdown")
install.packages(c("shiny", "knitr", "ggplot2"))
library("bitops", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("boot", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("caTools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("cluster", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("codetools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("compiler", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("digest", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("evaluate", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("foreign", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("formatR", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("grid", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("highr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("htmltools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("KernSmooth", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("lattice", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("magrittr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("markdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("MASS", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("colorspace", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages(c("class", "foreign", "MASS", "Matrix", "mgcv", "nlme", "nnet", "spatial"))
install.packages("nlme")
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
3/36
1-3/36
deck
1/52
52
4/52
0
12/52
1-11/51
2-11/51
2
2/51
1.6*.8
1.28/2
.64/2
.64/3
.64/1.5
0.64/1/5
0.64/1.5
2
1
.64
mypdf
function(x){x/2}
integrate(mypdf,0,1.6)
0
2
1
x^2=4*.5=2
.5
1
2
3
4
5
6
7
8
1.6
.32
1-x*x/4
(x^2/4)*.5
1.414214
1
99.7*98.5
99.7*.001
98.5*.001
99.7(+|.001)*99.7(.001)
99.7(.001)*99.7(.001)
99.7*(.001)
.997*(.001)
(1-.985)*(1-.001)
.00097/(.00097+.014895)
.00097/(.00097+..015*.999)
.00097/(.00097+.015*.999)
(.997*.001) by (.997*.001 + .015*.999)
(.997*.001) / (.997*.001 + .015*.999)
1/x
1/6
(1+2+3+4+5+6)/6
expect_dice()
expect_dice(1)
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
.5(edh+edl)
.5*(edh+edl)
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
mean(smeans)
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~
| parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
lm(child ~ parent, galton)
fit <- lm(child ~ parent, galton)
summary(fit)
fit$residuals
mean(fit$residuals)
cov(fit$residuals,
| galton$parent)
cov(fit$residuals,galton$parent)
ols.ic <- fit$coefficients[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
rhs-lhs
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(ols.ic,ols.slope)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- est(ols.slope,ols.ic)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild,(varRes+varEst)
)
all.equal(varChild,varEst+varRes)
efit <- lm(accel ~ mag+dist, attenu)
mean(residuals())
mean(residuals)
mean(efit$residuals)
cov(attenu$mag)
cov(residuals,attenu$mag)
cov(residuals(attenu$mag))
cov(residuals,attenu$mag)
cov()
cov(attenu$mag,efit$residuals)
cov(attenu$dist,efit$residuals)
car
cor
cor(gpa_nor,gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
swirl
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(.975,df=2)
myplot2(20)
sleep
range(g1)
range(g2)
difference <- g2-g1
mean(difference)
s <- sd(difference)
c(-1,1)*qt(.975)
c(-1,1)*qt(.975,df=10-1)
mn + c(-1,1)*qt(.975,9)*s/sqrt(10)
t.test(difference)$conf.int
(132.86-1)(15.34)^2+(127.44-1)(18.23)^2
(132.86-1)*(15.34)^2+(127.44-1)*(18.23)^2
sp <- 7*15.34^2 + 20*18.23^2
ns <- 2
ns <- 8+21-2
sp <- sqrt(sp/ns)
c(-1,1)*qt(.95,df=1)
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
sp <- var(g2-g1)
sp <- sqrt((9*var(g1)+9*var(g2))/18)
sqrt((9*var(g1)+9*var(g2))/18)
md + c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
t.test(g2,g1,paired = FALSE,var.equal = TRUE)$conf
t.test(g2,g1,paired = TRUE)$conf
num <- sqrt(15.34/8)
num <- (15.34^2/8 + 18.23^2/21)^2
den <- 8^4/15.34^2
den <- 15.34^4/8^2/7 + 18.23^4/21^2/20
mydf <- num/den
x <- 2
132.86-127.44 +c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
100/sqrt(32)
32/sqrt(100)
s/sqrt(n)
10/sqrt(32)
s/sqrt(n)
100/sqrt(32)
32/sqrt(100)
32/sqrt(100)
1
install.packages(c("curl", "devtools", "httr", "kernlab", "memoise", "mgcv", "R6", "RMySQL", "rstudioapi"))
install.packages("ggplot2")
install.packages("swirl")
library("swirl")
install_from_swirl("Statistical Inference")
swirl()
s/sqrt(n)
1
2/1
.8
15
qt(.95,15)
dim(fs)
t.test(fs$sheight-fs$fheight)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
8
omnitest(correctExpr='pt(2.5, 15, lower.tail=FALSE)')
pt(2.5, 15, lower.tail=FALSE)
qnorm(.95)
qnorm(.99)
pnorm(2)
pnorm(2,lower.tail=FALSE)
mybin
pbinom(6,size=8,prob=.5,lower.tail=FALSE)
pbinom(7,size=8,prob=.5,lower.tail=TRUE)
ppois(9,5,lower.tail=FALSE)
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(.95)
pnorm(30+z,mean=30,lower.tail=FALSE)
pnorm(30+z,mean=32,lower.tail=FALSE)
pnorm(30+z,mean=32,sd=1,lower.tail=FALSE)
pnorm(30+z*2,mean=32,sd=2,lower.tail=FALSE)
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample",  alt = "one.sided")$power
power.t.test(n = 16, delta = 2 , sd=4, type = "one.sample",  alt = "one.sided")$power
power.t.test(n = 16, delta = 100 , sd=200, type = "one.sample",  alt = "one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample",  alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample",  alt = "one.sided")$n
power.t.test(power = .8, delta = 100 , sd=200, type = "one.sample",  alt = "one.sided")$n
power.t.test(power = .8, n=26, sd=1, type = "one.sample",  alt = "one.sided")$delta
power.t.test(power = .8, n=27, sd=1, type = "one.sample",  alt = "one.sided")$delta
head(pValues)
sum(pValues < 0.05)
sum(p.adjust(pValues,method="bonferroni") < 0.05)
sum(p.adjust(pValues,method="BH") < 0.05)
ta
tail(trueStatus)
table(pValues2 < 0.05, trueStatus)
24/500
table(p.adjust(pValues2,method=\"bonferroni\") < 0.05, trueStatus)
"table(p.adjust(pValues2,method=\"bonferroni\") < 0.05, trueStatus)"
table(p.adjust(pValues2,method="bonferroni") < 0.05, trueStatus)
table(p.adjust(pValues2,method=\"BH\") < 0.05, trueStatus)
table(p.adjust(pValues2,method="BH") < 0.05, trueStatus)
sum(1:6)/6
print(g2)
head(sh)
head(nh)
nh
median(resampledMedians)
median(sh)
sam <- sample(fh,nh*B,replace=TRUE)
resam <- matrix(sam,B,nh)
meds <- apply(resam,1,median)
median(meds)-median(fh)
sd(meds)
sd(resampledMedians)
v
quantile(resampledMedians,c(.025,.975))
quantile(meds,c(.025,.975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
BCounts
BCcounts
group
testStat()
testStat
obs <- testStat(BCcounts)
obs <- testStat(BCcounts,g=1)
obs <- testStat(BCcounts,group)
obs
mean(Bdata$count - Cdata$count)
sample(array())
sample(group)
perms <- sapply(1 : 10000, function(i)
| testStat(BCcounts, sample(group)))
perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
perms > obs
mean(perms>obs)
testStat(DEcounts,group)
perms <- sapply(1 : 10000, function(i) testStat(DEcounts,
sample(group)))
library(swirl)
install_from_swirl("Regression Model")
install_from_swirl("Regression Models")
swirl
swirl()
lm(child~ parent,galton)
fit <- lm(child ~ parent, galton)
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(fit)
1-sRes/sTot
summary(fit)$r.squared
cor(galton$parent,galton$child)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent - 1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume
~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
View(trees2)
fit2 <-
lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
lm(all())
lm(all,swiss)
all <- lm(Fertility ~ ., swiss)
all
summary(all)
summary(lm(Fertility ~ Agriculture, swiss))
cor(Examination,Education)
cor(swiss$Examination,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
makelms(swiss$Agriculture)
makelms(Swiss$Agriculture)
makelms()
ec <- swiss$Examination+swiss$Catholic
efit <- lm(Fertility ~ . + ec, swiss)
all$coefficients - efit$coefficients
dim(InsectSprays)
dim(InsectSprays)
head(InsectSprays,15)
sF
summary(InsectSprays[,2])
sapply(InsectSprays,class)
fit <- lm(count ~ spray, InsectSprays)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sprayB)
mean(sB)
nfit <- lm(count ~ spray - 1, InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray,"C")
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(hunger)
fit <- lm(hunger$Numeric ~ hunger$Year)
summary(fit)$coef
lmF <- lm(hunger$Numeric[hunger$Sex=="Female"] ~ hunger$Year[hunger$Sex=="Female"])
lmM <- lm(hunger$Numeric[hunger$Sex=="Male"] ~ hunger$Year[hunger$Sex=="Male"])
lmBoth <- lm(hunger$Numeric ~ hunger$Year + hunger$Sex)
summary(lmBoth)
lmInter <- lm(hunger$Numeric ~ hunger$Year + hunger$Sex + hunger$Year * hunger$Sex)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- lm(y ~ x, out2[-1, ])
plot(fit, which=1)
plot(fitno, which=1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit))) or View(cbind(rstd, rstandard(fit)))
View(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
Use plot(fit,
which=2)
plot(fit,
which=2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2)-predict(fit, out2)
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
library(swirl)
swirl()
rgp1()
rgp2()
View(swiss)
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ . -Examination, swiss)
vif(mdl2)
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm(Fertiliy ~ Agriculture, swiss)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- (deviance(fit1) - deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
install.packages("miniUI")
install.packages("miniCRAN")
install.packages("miniGUI")
install.packages("minimax")
install.packages("minimist")
install.packages("nnet")
library(swirl)
swirl()
ravenData
mdl <- glm(ravenWinNum ~ ravenScore, binomial, ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
data("ToothGrowth")
str(ToothGrowth)
ssummary\(ToothGrowth)
summary(ToothGrowth)
setwd("~/datasciencecoursera/Statistical Inference/Course Project")
source('~/.active-rstudio-document', echo=TRUE)
?set.seed
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
set.seed(131415)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
hist(runif(1000))
